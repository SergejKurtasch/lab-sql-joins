/*Challenge - Joining on multiple tables
Write SQL queries to perform the following tasks using the Sakila database:
*/
USE sakila;
-- List the number of films per category.

SELECT 
	special_features
    ,count(*) as num_of_films 
from film
group by special_features;

-- Retrieve the store ID, city, and country for each store.

select 
	s.store_id
    ,c.city
    , cn.country
from store as s
join address as a
	on s.address_id = a.address_id
join city as c
	on a.city_id = c.city_id
join country as cn
	on c.country_id = cn.country_id;


-- Calculate the total revenue generated by each store in dollars.

select
	s.store_id 
    , sum(p.amount) as total_revenue
from store as s
join inventory as i
	on s.store_id = i.store_id
join rental as r
	on i.inventory_id = r.inventory_id
join payment as p
	on p.rental_id = r.rental_id
group by s.store_id;

-- Determine the average running time of films for each category.

select 
	special_features, round(avg(length)) as avg_run_time
from film
group by special_features;


-- Bonus:

-- Identify the film categories with the longest average running time.

select 
	special_features, round(avg(length)) as avg_run_time
from film
group by special_features
order by avg_run_time desc
limit 5;

-- Display the top 10 most frequently rented movies in descending order.

select 
	f.title
    ,count(r.rental_id) as num_views
from film f 
join inventory i 
	using (film_id)
join rental r 
	on i.inventory_id = r.inventory_id
group by f.title
order by num_views DESC
limit 10 ;

-- Determine if "Academy Dinosaur" can be rented from Store 1.

select f.title, i.store_id, count(i.inventory_id) 
from inventory i
join film f 
	using (film_id)
where f.title = "Academy Dinosaur"
group by i.film_id, i.store_id
having i.store_id = 1
;

-- Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."


select 
	-- i.inventory_id
    title
    , max(rental_date)
    , max(return_date)
    , min(case when return_date is null or i.film_id is null then 'not available' else 'available' end) as availability
from rental r
join inventory i
	on r.inventory_id = i.inventory_id
right join film f
	on f.film_id = i.film_id
group by title;

/*
Here are some tips to help you successfully complete the lab:

Tip 1: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps we discussed in class:

Make sure you understand the relationships between the tables in the database. This will help you determine which tables to join and which columns to use in your joins.
Identify a common column for both tables to use in the ON section of the join. If there isn't a common column, you may need to add another table with a common column.
Decide which table you want to use as the left table (immediately after FROM) and which will be the right table (immediately after JOIN).
Determine which table you want to include all records from. This will help you decide which type of JOIN to use. If you want all records from the first table, use a LEFT JOIN. If you want all records from the second table, use a RIGHT JOIN. If you want records from both tables only where there is a match, use an INNER JOIN.
Use table aliases to make your queries easier to read and understand. This is especially important when working with multiple tables.
Write the query
Tip 2: Break down the problem into smaller, more manageable parts. For example, you might start by writing a query to retrieve data from just two tables before adding additional tables to the join. Test your queries as you go, and check the output carefully to make sure it matches what you expect. This process takes time, so be patient and go step by step to build your query incrementally.

*/